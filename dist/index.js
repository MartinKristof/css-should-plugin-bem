!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var s in r)("object"==typeof exports?exports:e)[s]=r[s]}}(window,function(){return function(e){var t={};function r(s){if(t[s])return t[s].exports;var o=t[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(s,o,function(t){return e[t]}.bind(null,o));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e){let t=[];return t=s.getParts(e,t,s.isBemBlock(e),s.getBlockParam),t=s.getParts(e,t,s.isBemModifier(e),s.getModifierParam)}static isBemBlock(e){return!!e.match(s.BLOCK_PATTERN)}static isBemModifier(e){return!!e.match(s.MODIFIER_PATTERN)}static getParts(e,t,r,s){if(!r)return t;return e.split(".").filter(Boolean).forEach(e=>{(e=s(e))&&!t.includes(e)&&t.push(e)}),t}static getBlockParam(e){const t=/\S+?(?=__)/g;return e.match(t)&&"."+e.match(t)[0]+" *"}static getModifierParam(e){const t=/\S+?(?=--)/g;return e.match(t)&&"."+e.match(t)[0]}}s.BLOCK_PATTERN=/\S+__\S+/g,s.MODIFIER_PATTERN=/\S+--\S+/g,t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(2),o=r(3),n=e=>new s.default(e.stylesheet.rules).resolve();t.preprocess=((e,t)=>(e.stylesheet.rules=n(e),t())),t.processLint=(e=>(e.stylesheet.rules=n(e),o.lint(e))),t.name="BEM"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);class o{constructor(e){this.rules=e}resolve(){let e=[];return this.rules.forEach(t=>{if(o.isNotMediaQuery(t)&&o.isRule(t)){this.flattenRules([t]).map(t=>{e.push(this.getRuleWithBemDeclarations(t))})}else t.rules=this.flattenRules(t.rules),t.rules=t.rules.map(e=>this.getRuleWithBemDeclarations(e)),e.push(t)}),e}flattenRules(e){let t=[];return e?(e.forEach(e=>{e.selectors&&e.selectors.forEach(r=>{const s={type:e.type,selectors:[r],declarations:e.declarations,position:e.position};t.push(s)})}),t):t}static isNotMediaQuery(e){return"media"!==e.type}static isRule(e){return"rule"===e.type}getRuleWithBemDeclarations(e){const t=[];if(e.selectors.forEach(e=>{o.isCssClass(e)&&(e=o.getLastPartOfCssClass(e),t.push(e))}),t.length<1)return e;let r=s.default.parse(t[0]);return(r=o.removeInvalidMatches(r))?(e.declarations=e.declarations.concat(r.map(e=>({type:"declaration",property:"x-should",value:`match '${e}'`}))),e):e}static isCssClass(e){return!!e.match(/(\.\S+)/g)}static removeInvalidMatches(e){return e.filter(e=>!e.match(/\[.+/g))}static getLastPartOfCssClass(e){return"."+e.split(".").filter(Boolean).pop()}}t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);t.lint=(e=>{return o(e).map(({rule:e,className:t})=>({missingClassName:t,selector:e.selectors[0]||"",source:e.position.source,start:e.position.start,end:e.position.end}))});const o=e=>{let t=[],r=[],s=[];return e.stylesheet.rules.forEach(e=>{n(e,t,r,s),"media"===e.type&&e.rules.forEach(e=>{n(e,t,r,s)})}),[...new Set(t)]},n=(e,t,r,o)=>{if("rule"===e.type){const n=e.selectors[0];o.push(n),e.declarations.forEach(i=>{if("x-should"===i.property){const a=i.value.match(/(?=\.)(.*)(?=')/g)[0].match(/(\.\S+)/g)[0];if(!((e,t,r)=>!e.includes(r)&&!t.includes(r))(r,o,a))return;if(s.default.isBemModifier(n)&&s.default.isBemBlock(a)){const s=new RegExp(a,"g");n.match(s).length<=1&&(r.push(a),t.push({className:a,rule:e}))}!s.default.isBemBlock(n)||s.default.isBemModifier(a)||s.default.isBemBlock(a)||(r.push(a),t.push({className:a,rule:e}))}})}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,